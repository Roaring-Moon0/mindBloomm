
Hello MindBloom Team! 🌸

Welcome to your app's code! Think of this file as a friendly map. We'll go through it step-by-step, like we're building with LEGOs. It’s much simpler than it looks!

---

### 1. Where Are All the Files? (The Folder Map) 🗺️

Imagine your app is a big toy box. Inside, we have smaller boxes for different kinds of toys.

- `src/app/`: This is the most important box! Every folder you create inside here becomes a page in our app.
    - `src/app/login/page.tsx` -> is the code for the `yourwebsite.com/login` page.
    - `src/app/about/page.tsx` -> is the code for the `yourwebsite.com/about` page.
    It's that simple!

- `src/components/`: This is our box of LEGO blocks.
    - `ui/`: These are the super basic blocks that `shadcn/ui` gave us, like `button.tsx` and `card.tsx`. We use these to build everything.
    - `layout/`: These are the big pieces that appear on almost every page, like the `Header.tsx` (top menu) and `Footer.tsx` (bottom links).
    - `games/`: The special blocks for our fun calming games are here!

- `src/hooks/`: This is our box of "magic spells." Hooks are reusable bits of logic.
    - `use-auth.tsx`: The spell to know "Who is logged in right now?".
    - `use-admin-auth.tsx`: The spell to know "Is this logged-in person an Admin?".
    - `use-firestore.tsx`: The spell to "Go get the latest data from our database!".

- `src/lib/`: This is our toolbox.
    - `firebase.ts`: This is the key to start our connection to the Firebase database and authentication service. It has the secret codes to connect to our project.
    - `utils.ts`: Tiny helper tools that we use everywhere.

- `src/services/`: This is our "to-do list" for the database.
    - When we need to add a new survey or ban a user, the code to do that lives here. It tells Firebase exactly what to change.

- `src/ai/`: This is where our AI friend, Bloom, lives!
    - `genkit.ts`: This starts up the AI brain (Genkit).
    - `flows/`: These are Bloom's "skills." For example, `generate-personalized-recommendations.ts` is the skill Bloom uses to listen to you and give advice.

---

### 2. How Does Login and Admin Access Work? (The Keys to the Kingdom) 🔑

This is a two-step secret handshake.

**Step 1: Normal User Login**
- A user signs up or logs in (`/login` or `/signup`).
- Firebase checks their email and password. If it's correct, Firebase gives them a "key" (it saves this in the browser).
- Our `useAuth()` hook checks for this key on every page. If the key exists, we know who the user is and can show them their dashboard.

**Step 2: Becoming an Admin**
- Just being logged in isn't enough to be an admin. You need a *special* key.
- A user goes to the `/admin` page.
- The `useAdminAuth()` hook sees they are logged in but NOT an admin yet. So it shows them a box to type a secret code.
- They type the code.
- The code in `useAdminAuth()` runs to the `adminCodes` collection in our database to see if it's a valid code.
- If the code is VALID, we do something amazing: we add the user's ID to a *second* collection called `admins`.
- **Why is this important?** From now on, whenever this user logs in, the `useAdminAuth()` hook will see their ID in the `admins` collection and will immediately know "This person is an Admin!". They will never have to enter the code again.

This is super secure because our **Firestore Rules** (the database's security guard) only allow users whose ID is in the `admins` collection to write or delete things like surveys and videos.

---

### 3. How Does the AI "Bloom" Think? (Inside the Brain) 🤖

Bloom is powered by Genkit. It's very simple.

1.  **The Prompt (`generate-personalized-recommendations.ts`)**: We wrote a very long instruction manual for the AI. It's just a piece of text inside the code! It says things like:
    - "You are a caring, empathetic friend."
    - "If a user says they are sad, first validate their feelings. Don't just give solutions."
    - "NEVER say you are an AI."

2.  **The Flow**: When a user types a message in the chat, our app takes that message and sends it to the AI along with our big instruction manual (the prompt).

3.  **The Magic**: The AI reads our instructions and the user's message, thinks really hard, and writes a response that follows all our rules.

4.  **The Response**: We get the AI's text back and simply show it on the screen in the chat bubble.

That's it! We are just having a conversation with a very smart AI that has to follow a script we wrote for it.

---

### 4. How Do We Show Live Data? (The "All Videos" and "Survey" Pages) 📺

Before, our videos were "hardcoded," meaning they were typed directly into the page's code. That's not good for a real app!

Now, we use our magic `useFirestoreCollection()` hook.

- On the `/resources` page, in the "All Videos" tab, we call this hook: `useFirestoreCollection('videos')`.
- This spell goes to our Firestore database, finds the `videos` collection, and brings back all the video documents you created in the admin dashboard.
- The page then draws a `VideoCard` for each document it finds.
- When you toggle a video's visibility in the admin panel, the hook sees the change automatically and updates the page in real-time!

We do the exact same thing on the `/survey` page for the `surveys` collection.

---

### Simple Guide to a Page's Logic (`/admin/page.tsx`)

Let's look at the admin page as an example.

1.  It starts by calling our magic hook: `useAdminAuth()`. This tells us if we are `loading`, if there is a `user`, and if that user `isAdmin`.
2.  If `loading` is true, we show a "Loading..." message.
3.  If there is NO `user`, we tell them to log in.
4.  If there IS a `user` but `isAdmin` is false, we show them the special box to enter their secret admin code.
5.  If there IS a `user` AND `isAdmin` is true, we show them the full Admin Dashboard with all the manager components (for Surveys, Videos, Users, etc.).

Every protected page follows a similar logic! It's all about checking the user's status first, then deciding what to show them.

Good luck with your presentation! You've all built something amazing here. Just remember these simple ideas, and you'll be able to explain any part of it with confidence.
