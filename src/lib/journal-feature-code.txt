
This file contains all the code related to the MindBloom Journal and Gratitude Tree feature for easy review.

================================================================================
File: src/app/journal/page.tsx
================================================================================

'use client';

import { useAuth } from '@/hooks/use-auth';
import { useRouter } from 'next/navigation';
import { Loader2 } from 'lucide-react';
import { FadeIn } from '@/components/ui/fade-in';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import JournalClientPage from './journal-client';


export default function JournalPage() {
    const { user, loading } = useAuth();
    const router = useRouter();

    if (loading) {
        return (
            <div className="container mx-auto py-12 px-4 md:px-6 flex flex-col items-center justify-center text-center min-h-screen">
                <Loader2 className="w-12 h-12 animate-spin mb-4 text-primary"/>
                <h1 className="text-2xl font-bold">Loading Your Journal...</h1>
                <p className="text-muted-foreground">Please wait a moment.</p>
            </div>
        )
    }

    if (!user) {
        return (
            <FadeIn>
                <div className="container mx-auto py-12 px-4 md:px-6 text-center min-h-screen flex items-center justify-center">
                    <Card className="max-w-lg mx-auto">
                        <CardHeader>
                            <CardTitle>Access Denied</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <p>You need to be logged in to view your Tree Journal.</p>
                            <Button asChild>
                                <Link href="/login?redirect=/journal">Login to View Journal</Link>
                            </Button>
                        </CardContent>
                    </Card>
                </div>
            </FadeIn>
        )
    }

    return <JournalClientPage uid={user.uid} />;
}


================================================================================
File: src/app/journal/journal-client.tsx
================================================================================

'use client';

import { FadeIn } from '@/components/ui/fade-in';
import TreeSection from '@/components/journal/TreeSection';

export default function JournalClientPage({ uid }: { uid: string }) {
    return (
        <FadeIn>
            <div className="container mx-auto py-8">
               <TreeSection uid={uid} />
            </div>
        </FadeIn>
    )
}


================================================================================
File: src/components/journal/TreeSection.tsx
================================================================================

'use client';

import React, { useState, useMemo } from 'react';
import type { User } from 'firebase/auth';
import { useAuth } from '@/hooks/use-auth';
import { useFirestoreCollection, useFirestoreDocument } from '@/hooks/use-firestore';
import { addNote, renameTree, startNewChat } from '@/services/journal-service';
import { useToast } from '@/hooks/use-toast';
import { motion } from 'framer-motion';

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';
import { Sparkles, Plus, Download, Bot, History, Loader2, Edit } from 'lucide-react';
import jsPDF from 'jspdf';
import { format } from 'date-fns';

import { TreeAiChatDialog } from './TreeAiChatDialog';
import { ChatHistoryDialog } from './ChatHistoryDialog';
import { JournalEntryCard } from './JournalEntryCard';
import { JournalEditor } from './JournalEditor';
import { JournalTree } from './JournalTree';

interface Note {
  id: string;
  text: string;
  type: 'good' | 'bad';
  createdAt: any;
}

interface TreeState {
  treeName?: string;
  createdAt?: any;
}

interface JournalEntry {
    id: string;
    content: string;
    createdAt: any;
}

// ----------------- Memories Dialog -----------------
function MemoriesDialog({ notes, isOpen, onOpenChange }: { notes: Note[], isOpen: boolean, onOpenChange: (open: boolean) => void }) {
  const { toast } = useToast();

  const downloadPDF = () => {
    const doc = new jsPDF();
    doc.text('Your Memories', 10, 10);
    notes.forEach((n, i) => {
      const date = n.createdAt?.toDate ? format(n.createdAt.toDate(), 'P p') : 'N/A';
      doc.text(`[${n.type.toUpperCase()}] ${n.text} (${date})`, 10, 20 + i * 10);
    });
    doc.save('memories.pdf');
    toast({ title: 'Downloading PDF...' });
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle>All Memories</DialogTitle>
          <DialogDescription>A complete history of your thoughts.</DialogDescription>
        </DialogHeader>
        <div className="space-y-2 max-h-96 overflow-y-auto p-1">
          {notes.length > 0 ? notes.map(n => n.type === 'good' ?
            <GoodNote key={n.id} text={n.text} createdAt={n.createdAt?.toDate ? format(n.createdAt.toDate(), 'P p') : ''} /> :
            <BurningNote key={n.id} text={n.text} createdAt={n.createdAt?.toDate ? format(n.createdAt.toDate(), 'P p') : ''} />
          ) : <p className="text-muted-foreground text-center py-8">No memories yet.</p>}
        </div>
        <DialogFooter>
          <Button onClick={downloadPDF} disabled={notes.length === 0}><Download className="mr-2 h-4 w-4" /> Download as PDF</Button>
          <Button variant="outline" onClick={() => onOpenChange(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

const BurningNote = ({ text, createdAt }: { text: string; createdAt: string }) => (
  <motion.div className="p-2 rounded-md bg-red-100/60 border border-red-400/50 text-sm" animate={{ opacity: [1, 0.7, 1] }} transition={{ repeat: Infinity, duration: 2 }}>
    {text} ðŸ”¥
    <div className="text-xs text-gray-600 mt-1">{createdAt}</div>
  </motion.div>
);

const GoodNote = ({ text, createdAt }: { text: string; createdAt: string }) => (
  <motion.div className="p-2 rounded-md bg-green-100/60 border border-green-400/50 text-sm" animate={{ opacity: [1, 0.85, 1] }} transition={{ repeat: Infinity, duration: 3 }}>
    {text} âœ¨
    <div className="text-xs text-gray-600 mt-1">{createdAt}</div>
  </motion.div>
);

// ----------------- Main TreeSection -----------------
export default function TreeSection({ uid }: { uid: string }) {
  const { user, loading: authLoading } = useAuth();
  const { data: journalEntries, loading: entriesLoading } = useFirestoreCollection<JournalEntry>(`users/${uid}/journalEntries`);
  const { data: treeState, loading: treeStateLoading } = useFirestoreDocument<TreeState>(`users/${uid}/journal/state`);

  const [isAiChatOpen, setIsAiChatOpen] = useState(false);
  const [isChatHistoryOpen, setIsChatHistoryOpen] = useState(false);

  const { toast } = useToast();

  const handleNewChat = async () => {
    try { 
        await startNewChat(uid); 
        toast({ title: 'New chat started!' }); 
        setIsChatHistoryOpen(true); 
    }
    catch (e: any) { toast({ variant: 'destructive', title: 'Error starting chat' }); }
  };
  
  const entryCount = journalEntries?.length || 0;
  const treeName = treeState?.treeName || "My Gratitude Tree";
  const { health, mood } = useMemo(() => {
    const ratio = entryCount > 0 ? Math.min(entryCount / 30, 1) : 0;
    let currentHealth = 'withered';
    let currentMood = 'ðŸ˜¢';

    if (ratio > 0.66) {
      currentHealth = 'healthy';
      currentMood = 'ðŸ˜„';
    } else if (ratio > 0.33) {
      currentHealth = 'weak';
      currentMood = 'ðŸ˜•';
    }
    return { health: currentHealth, mood: currentMood };
  }, [entryCount]);
  
  const loading = authLoading || entriesLoading || treeStateLoading;

  if (loading) {
    return <div className="flex justify-center items-center h-96"><Loader2 className="w-12 h-12 animate-spin text-primary" /></div>;
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
      {/* Left Column - Journal Entries */}
      <div className="lg:col-span-2 space-y-6">
        <JournalEditor />
        <div className="space-y-4">
            <h3 className="text-xl font-bold">Past Entries</h3>
             {journalEntries && journalEntries.length > 0 ? (
                journalEntries.map(entry => (
                    <JournalEntryCard key={entry.id} entry={entry} uid={uid} />
                ))
            ) : (
                <Card>
                    <CardContent className="pt-6 text-center text-muted-foreground">
                        No journal entries yet. Add one above to start growing your tree!
                    </CardContent>
                </Card>
            )}
        </div>
      </div>

      {/* Right Column - Tree and Actions */}
      <div className="space-y-6">
        <JournalTree entryCount={entryCount} treeName={treeName} />
        <Card>
            <CardHeader>
                <CardTitle>Interact</CardTitle>
                <CardDescription>Chat with your tree or review past conversations.</CardDescription>
            </CardHeader>
            <CardContent className="grid grid-cols-1 gap-2">
                <Button variant="outline" onClick={() => setIsAiChatOpen(true)} disabled={!user}>
                    <Bot className="mr-2 h-4 w-4" /> Talk to Your Tree
                </Button>
                <Button variant="outline" onClick={handleNewChat} disabled={!user}>
                    <Plus className="mr-2 h-4 w-4" /> Start New Chat
                </Button>
                <Button variant="outline" onClick={() => setIsChatHistoryOpen(true)} disabled={!user}>
                    <History className="mr-2 h-4 w-4" /> Chat History
                </Button>
            </CardContent>
        </Card>
      </div>

      {/* Dialogs */}
      {user && (
          <>
            <TreeAiChatDialog 
                isOpen={isAiChatOpen} 
                onOpenChange={setIsAiChatOpen} 
                user={user} 
                treeState={{ name: treeName, health: entryCount * 3.33, mood: health }} 
            />
            <ChatHistoryDialog 
                isOpen={isChatHistoryOpen} 
                onOpenChange={setIsChatHistoryOpen} 
                user={user} 
            />
          </>
      )}
    </div>
  );
}


================================================================================
File: src/components/journal/JournalEditor.tsx
================================================================================

'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { addJournalEntry } from '@/services/journal-service';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Loader2, PlusCircle } from 'lucide-react';

const formSchema = z.object({
  content: z.string().min(10, { message: "Your entry must be at least 10 characters." }),
});

export function JournalEditor() {
    const { user } = useAuth();
    const form = useForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: { content: "" },
    });

    const { formState: { isSubmitting } } = form;

    const onSubmit = async (values: z.infer<typeof formSchema>) => {
        if (!user) {
            toast({ variant: 'destructive', title: 'Authentication Error', description: 'You must be logged in to save an entry.' });
            return;
        }

        try {
            await addJournalEntry(user.uid, values.content);
            toast({ title: "Entry Saved", description: "Your tree has grown a little today!" });
            form.reset();
        } catch (error: any) {
            toast({ variant: 'destructive', title: "Error Saving Entry", description: error.message });
        }
    };

    return (
        <Card>
            <CardHeader>
                <CardTitle>New Journal Entry</CardTitle>
                <CardDescription>What are you grateful for today?</CardDescription>
            </CardHeader>
            <CardContent>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                        <FormField
                            control={form.control}
                            name="content"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel className="sr-only">Journal Entry</FormLabel>
                                    <FormControl>
                                        <Textarea
                                            placeholder="Today, I'm thankful for..."
                                            className="min-h-[120px]"
                                            {...field}
                                        />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <Button type="submit" disabled={isSubmitting || !user}>
                            {isSubmitting ? <><Loader2 className="mr-2 h-4 w-4 animate-spin"/> Saving...</> : <><PlusCircle className="mr-2 h-4 w-4"/> Save Entry</>}
                        </Button>
                    </form>
                </Form>
            </CardContent>
        </Card>
    );
}


================================================================================
File: src/components/journal/JournalEntryCard.tsx
================================================================================

'use client';

import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { deleteJournalEntry } from '@/services/journal-service';
import { toast } from '@/hooks/use-toast';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Trash2 } from 'lucide-react';
import { format } from 'date-fns';

interface JournalEntry {
    id: string;
    content: string;
    createdAt: any;
}

export function JournalEntryCard({ entry, uid }: { entry: JournalEntry, uid: string }) {
    
    const handleDelete = async () => {
        if (!uid) {
            toast({ variant: 'destructive', title: "Error", description: "User ID is missing." });
            return;
        }
        try {
            await deleteJournalEntry(uid, entry.id);
            toast({ title: "Entry Deleted" });
        } catch (error: any) {
             toast({ variant: 'destructive', title: "Error Deleting Entry", description: error.message });
        }
    };
    
    const formattedDate = entry.createdAt?.toDate ? format(entry.createdAt.toDate(), 'MMMM d, yyyy') : 'Date not available';

    return (
        <Card>
            <CardHeader>
                <CardDescription>{formattedDate}</CardDescription>
            </CardHeader>
            <CardContent>
                <p className="whitespace-pre-wrap">{entry.content}</p>
            </CardContent>
            <CardFooter className="flex justify-end">
                 <AlertDialog>
                    <AlertDialogTrigger asChild>
                        <Button variant="ghost" size="icon" className="text-muted-foreground hover:text-destructive">
                            <Trash2 className="w-4 h-4"/>
                        </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                        <AlertDialogHeader>
                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                        <AlertDialogDescription>
                            This action cannot be undone. This will permanently delete your journal entry.
                        </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction onClick={handleDelete} className="bg-destructive hover:bg-destructive/90">
                            Delete
                        </AlertDialogAction>
                        </AlertDialogFooter>
                    </AlertDialogContent>
                </AlertDialog>
            </CardFooter>
        </Card>
    );
}


================================================================================
File: src/components/journal/JournalTree.tsx
================================================================================

'use client';

import { useState } from 'react';
import Image from 'next/image';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { updateTreeName } from '@/services/journal-service';
import { useAuth } from '@/hooks/use-auth';
import { Loader2, Edit, Check } from 'lucide-react';
import { getTreeStage } from '@/lib/journal-utils';


interface JournalTreeProps {
    entryCount: number;
    treeName?: string;
}

export function JournalTree({ entryCount, treeName: initialTreeName }: JournalTreeProps) {
    const { user } = useAuth();
    const [isEditingName, setIsEditingName] = useState(false);
    const [newName, setNewName] = useState(initialTreeName || '');
    const [isSaving, setIsSaving] = useState(false);
    
    const { src, alt, stageName } = getTreeStage(entryCount);

    const handleSaveName = async () => {
        if (!user) {
            toast({ variant: 'destructive', title: 'Not logged in.' });
            return;
        }
        if (!newName.trim()) {
            toast({ variant: 'destructive', title: 'Name cannot be empty.' });
            return;
        }
        setIsSaving(true);
        try {
            await updateTreeName(user.uid, newName);
            toast({ title: 'Tree name updated!' });
            setIsEditingName(false);
        } catch (error: any) {
            toast({ variant: 'destructive', title: 'Error saving name', description: error.message });
        } finally {
            setIsSaving(false);
        }
    };
    
    return (
        <Card className="sticky top-24">
            <CardHeader className="text-center">
                {!isEditingName ? (
                    <CardTitle className="flex items-center justify-center gap-2 text-2xl">
                        {initialTreeName || "My Gratitude Tree"}
                        <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => { setIsEditingName(true); setNewName(initialTreeName || ''); }}>
                            <Edit className="h-4 w-4" />
                        </Button>
                    </CardTitle>
                ) : (
                    <div className="flex items-center gap-2">
                        <Input
                            value={newName}
                            onChange={(e) => setNewName(e.target.value)}
                            placeholder="Give your tree a name"
                            disabled={isSaving}
                            onKeyDown={(e) => e.key === 'Enter' && handleSaveName()}
                        />
                         <Button size="icon" onClick={handleSaveName} disabled={isSaving} className="h-9 w-9">
                            {isSaving ? <Loader2 className="h-4 w-4 animate-spin"/> : <Check className="h-4 w-4"/>}
                        </Button>
                        <Button variant="ghost" size="icon" onClick={() => setIsEditingName(false)} disabled={isSaving} className="h-9 w-9">
                           <Edit className="h-4 w-4"/>
                        </Button>
                    </div>
                )}
                 <CardDescription>
                    {entryCount} {entryCount === 1 ? 'entry' : 'entries'} | Stage: {stageName}
                </CardDescription>
            </CardHeader>
            <CardContent className="flex flex-col items-center justify-center p-6">
                <div className="relative w-full aspect-square max-w-[300px]">
                    <Image
                        src={src}
                        alt={alt}
                        fill
                        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                        className="object-contain"
                        priority
                    />
                </div>
            </CardContent>
        </Card>
    );
}

================================================================================
File: src/components/journal/TreeAiChatDialog.tsx
================================================================================

'use client';

import React, { useState, useRef, useEffect } from 'react';
import type { User } from 'firebase/auth';
import { treeAiChat } from '@/ai/flows/tree-ai-chat';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Send, Loader2 } from 'lucide-react';

interface TreeState {
  name: string;
  health: number;
  mood: string;
}

interface TreeAiChatDialogProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  user: User;
  treeState: TreeState;
}

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

export function TreeAiChatDialog({ isOpen, onOpenChange, user, treeState }: TreeAiChatDialogProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaViewportRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isOpen) {
      setMessages([
        {
          role: 'assistant',
          content: `Hello. I am ${treeState.name}. It is good to feel the sun with you. What is on your mind?`,
        },
      ]);
    }
  }, [isOpen, treeState.name]);
  
  useEffect(() => {
    if (scrollAreaViewportRef.current) {
      scrollAreaViewportRef.current.scrollTop = scrollAreaViewportRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage: Message = { role: 'user', content: input };
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const result = await treeAiChat({
        userInput: input,
        treeName: treeState.name,
        treeHealth: treeState.health,
        treeMood: treeState.mood,
      });

      const assistantMessage: Message = { role: 'assistant', content: result.response };
      setMessages((prev) => [...prev, assistantMessage]);

    } catch (error) {
      console.error('Tree AI Chat Error:', error);
      const errorMessage: Message = { role: 'assistant', content: "My thoughts are rustling like dry leaves... I can't seem to find the right words. Please try again later." };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const getInitials = (email: string | null | undefined) => {
    if (!email) return 'U';
    const name = user?.displayName;
    if (name) return name.substring(0, 2).toUpperCase();
    return email.substring(0, 2).toUpperCase();
  };


  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px] md:max-w-lg lg:max-w-2xl grid-rows-[auto,1fr,auto] max-h-[80vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>Talk to {treeState.name}</DialogTitle>
          <DialogDescription>
            Share your thoughts with your tree. It's always here to listen.
          </DialogDescription>
        </DialogHeader>
        
        <ScrollArea className="flex-grow my-4 pr-6 -mr-6" viewportRef={scrollAreaViewportRef}>
           <div className="space-y-4">
            {messages.map((message, index) => (
              <div
                key={index}
                className={`flex items-start gap-3 ${message.role === 'user' ? 'justify-end' : ''}`}
              >
                {message.role === 'assistant' && (
                  <Avatar className="w-8 h-8 border-2 border-primary/50 bg-green-100 text-lg">
                    <AvatarFallback>ðŸŒ³</AvatarFallback>
                  </Avatar>
                )}
                <div className={`rounded-lg p-3 max-w-sm text-sm ${message.role === 'user' ? 'bg-primary/20' : 'bg-secondary'}`}>
                  <p className="whitespace-pre-wrap">{message.content}</p>
                </div>
                {message.role === 'user' && user && (
                  <Avatar className="w-8 h-8">
                    <AvatarFallback>{getInitials(user.email)}</AvatarFallback>
                  </Avatar>
                )}
              </div>
            ))}
             {isLoading && (
              <div className="flex items-start gap-3">
                 <Avatar className="w-8 h-8 border-2 border-primary/50 bg-green-100 text-lg">
                    <AvatarFallback>ðŸŒ³</AvatarFallback>
                  </Avatar>
                <div className="rounded-lg p-3 bg-secondary flex items-center gap-2 text-sm">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <p>The tree is gathering its thoughts...</p>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        <form onSubmit={handleSendMessage} className="flex items-center gap-2 pt-4 border-t">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Share your thoughts..."
            autoComplete="off"
            disabled={isLoading}
          />
          <Button type="submit" size="icon" disabled={isLoading || !input.trim()}>
            {isLoading ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="w-4 w-4" />}
            <span className="sr-only">Send</span>
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}


================================================================================
File: src/components/journal/ChatHistoryDialog.tsx
================================================================================

'use client';

import React, { useState, useEffect } from 'react';
import type { User } from 'firebase/auth';
import { useFirestoreCollection } from '@/hooks/use-firestore';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Loader2, MessageCircle, AlertTriangle } from 'lucide-react';
import { format } from 'date-fns';
import { cn } from '@/lib/utils';

interface Chat {
  id: string;
  title: string;
  createdAt: any;
}

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'assistant';
  timestamp: any;
}

interface ChatHistoryDialogProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  user: User;
}

function ChatMessages({ chatId, user }: { chatId: string, user: User }) {
  const { data: messages, loading, error } = useFirestoreCollection<Message>(`users/${user?.uid}/chats/${chatId}/messages`);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-full">
        <Loader2 className="w-8 h-8 animate-spin" />
      </div>
    );
  }

  if (error) {
    return <div className="text-destructive text-center">Error loading messages.</div>
  }
  
  if (!messages || messages.length === 0) {
      return <div className="text-center text-muted-foreground py-10">No messages in this chat yet.</div>
  }
  
  const getInitials = (email: string | null | undefined) => {
    if (!email) return 'U';
    const name = user?.displayName;
    if (name) return name.substring(0, 2).toUpperCase();
    return email.substring(0, 2).toUpperCase();
  };


  return (
    <ScrollArea className="h-full">
      <div className="space-y-4 pr-4">
        {messages.map((message) => (
          <div key={message.id} className={cn("flex items-start gap-3", message.sender === 'user' ? 'justify-end' : '')}>
            {message.sender === 'assistant' && (
               <Avatar className="w-8 h-8 border-2 border-primary/50 bg-green-100 text-lg">
                <AvatarFallback>ðŸŒ³</AvatarFallback>
              </Avatar>
            )}
            <div className={cn("rounded-lg p-3 max-w-sm text-sm", message.sender === 'user' ? 'bg-primary/20' : 'bg-secondary')}>
              <p className="whitespace-pre-wrap">{message.text}</p>
              <p className="text-xs text-muted-foreground mt-1 text-right">{message.timestamp ? format(message.timestamp.toDate(), 'p') : ''}</p>
            </div>
             {message.sender === 'user' && user && (
              <Avatar className="w-8 h-8">
                <AvatarFallback>{getInitials(user.email)}</AvatarFallback>
              </Avatar>
            )}
          </div>
        ))}
      </div>
    </ScrollArea>
  );
}


export function ChatHistoryDialog({ isOpen, onOpenChange, user }: ChatHistoryDialogProps) {
  const { data: chats, loading, error } = useFirestoreCollection<Chat>(`users/${user?.uid}/chats`);
  const [selectedChatId, setSelectedChatId] = useState<string | null>(null);

  // When chats load, select the first one by default
  useEffect(() => {
    if (chats && chats.length > 0 && !selectedChatId) {
      setSelectedChatId(chats[0].id);
    }
  }, [chats, selectedChatId]);

  // Reset selected chat when dialog is closed
  useEffect(() => {
    if (!isOpen) {
        setSelectedChatId(null);
    }
  }, [isOpen]);

  // When chats data changes, select the first chat if none is selected
  useEffect(() => {
    if(chats && chats.length > 0 && !selectedChatId) {
        setSelectedChatId(chats[0].id)
    }
  }, [chats, selectedChatId])

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[70vh] grid grid-rows-[auto,1fr]">
        <DialogHeader>
          <DialogTitle>Chat History</DialogTitle>
          <DialogDescription>Review your past conversations with your tree.</DialogDescription>
        </DialogHeader>
        <div className="grid grid-cols-3 gap-6 overflow-hidden h-full">
          {/* Chat List */}
          <div className="col-span-1 border-r pr-4">
            <ScrollArea className="h-full">
              {loading && <div className="text-center"><Loader2 className="w-6 h-6 animate-spin mx-auto"/></div>}
              {error && <div className="text-destructive text-center flex flex-col items-center gap-2"><AlertTriangle/> Error loading chats.</div>}
              {chats && chats.length === 0 && !loading && (
                <div className="text-center text-muted-foreground p-4">
                    <MessageCircle className="mx-auto w-10 h-10 mb-2"/>
                    No chats found.
                </div>
              )}
              <div className="space-y-2">
                {chats?.map((chat) => (
                  <button
                    key={chat.id}
                    onClick={() => setSelectedChatId(chat.id)}
                    className={cn(
                      "w-full text-left p-3 rounded-md transition-colors",
                      selectedChatId === chat.id ? 'bg-primary/20 font-semibold' : 'hover:bg-secondary'
                    )}
                  >
                    <p>{chat.title}</p>
                    <p className="text-xs text-muted-foreground">
                      {chat.createdAt ? format(chat.createdAt.toDate(), 'MMMM d, yyyy') : ''}
                    </p>
                  </button>
                ))}
              </div>
            </ScrollArea>
          </div>
          {/* Messages View */}
          <div className="col-span-2 overflow-y-auto">
            {selectedChatId ? <ChatMessages chatId={selectedChatId} user={user} /> : (
                <div className="flex items-center justify-center h-full text-muted-foreground">
                    <p>Select a chat to view messages.</p>
                </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}


================================================================================
File: src/services/journal-service.ts
================================================================================

'use server';

import { db } from '@/lib/firebase';
import {
  collection,
  addDoc,
  doc,
  updateDoc,
  deleteDoc,
  serverTimestamp,
} from 'firebase/firestore';
import { format } from 'date-fns';

// ==============================
// Interfaces
// ==============================
export interface NotePayload {
  text: string;
  type: 'good' | 'bad';
}

// ==============================
// Notes
// ==============================
export const addNote = async (payload: NotePayload, uid: string) => {
  if (!uid) throw new Error('You must be logged in to add a note.');

  const notesCollectionRef = collection(db, `users/${uid}/notes`);
  await addDoc(notesCollectionRef, {
    ...payload,
    createdAt: serverTimestamp(),
  });
};

export const deleteNote = async (uid: string, noteId: string) => {
  if (!uid) throw new Error('You must be logged in to delete a note.');

  const noteDocRef = doc(db, `users/${uid}/notes`, noteId);
  await deleteDoc(noteDocRef);
};

// ==============================
// Tree State
// ==============================
export const renameTree = async (uid: string, name: string) => {
  if (!uid) throw new Error('You must be logged in to rename the tree.');

  const treeStateRef = doc(db, `users/${uid}/journal/state`);
  await updateDoc(treeStateRef, { treeName: name });
};

// ==============================
// Chat
// ==============================
export const startNewChat = async (uid: string) => {
  if (!uid) throw new Error('You must be logged in to start a chat.');

  const chatsCollectionRef = collection(db, `users/${uid}/chats`);

  const newChatRef = await addDoc(chatsCollectionRef, {
    title: `Chat from ${format(new Date(), 'MMMM d, yyyy')}`,
    createdAt: serverTimestamp(),
    userId: uid,
  });

  // Add initial assistant message
  const messagesCollectionRef = collection(newChatRef, 'messages');
  await addDoc(messagesCollectionRef, {
    text: "The tree is listening. What's on your mind?",
    sender: 'assistant',
    timestamp: serverTimestamp(),
  });

  return newChatRef.id;
};

// ==============================
// Journal Entries
// ==============================
export const addJournalEntry = async (uid: string, content: string) => {
  if (!uid) throw new Error('You must be logged in to save a journal entry.');

  const journalCollectionRef = collection(db, `users/${uid}/journalEntries`);
  await addDoc(journalCollectionRef, {
    content: content,
    createdAt: serverTimestamp(),
  });
};

export const deleteJournalEntry = async (uid: string, entryId: string) => {
  if (!uid) throw new Error('You must be logged in to delete a journal entry.');

  const entryDocRef = doc(db, `users/${uid}/journalEntries`, entryId);
  await deleteDoc(entryDocRef);
};

// ==============================
// Update Tree Name (Journal)
export const updateTreeName = async (uid: string, name: string) => {
  if (!uid) throw new Error('You must be logged in to update the tree name.');

  const treeStateRef = doc(db, `users/${uid}/journal/state`);
  await updateDoc(treeStateRef, {
    treeName: name,
  });
};


================================================================================
File: src/lib/journal-utils.ts
================================================================================

export function getTreeStage(entryCount: number) {
    if (entryCount >= 30) {
        return { src: '/assets/trees/tree_stage_5.png', alt: 'A large, flourishing tree with abundant leaves.', stageName: 'Flourishing' };
    }
    if (entryCount >= 20) {
        return { src: '/assets/trees/tree_stage_4.png', alt: 'A healthy, full-grown tree.', stageName: 'Mature' };
    }
    if (entryCount >= 10) {
        return { src: '/assets/trees/tree_stage_3.png', alt: 'A young tree with several branches and leaves.', stageName: 'Growing' };
    }
    if (entryCount >= 1) {
        return { src: '/assets/trees/tree_stage_2.png', alt: 'A small sapling with a few leaves.', stageName: 'Sapling' };
    }
    return { src: '/assets/trees/tree_stage_1.png', alt: 'A tiny sprout just breaking through the soil.', stageName: 'Sprout' };
}
