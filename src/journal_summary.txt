
// =================================================================================
// Firestore Security Rules (firestore.rules)
// This controls access to the journal data, ensuring users can only access their own entries.
// =================================================================================
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // USER-SPECIFIC DATA
    // This rule allows a user to read and write to their own document
    // and any subcollections within it (like notes, chats, etc.).
    match /users/{userId}/{document=**} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Other public collections like 'videos' or 'surveys' would go here.
    match /videos/{docId} {
      allow read: if true;
      allow write: if false; 
    }
    match /surveys/{docId} {
      allow read: if true;
    }
    // Admin related rules
    match /adminCodes/{docId} {
      allow read: if request.auth != null;
    }
    match /admins/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}

// =================================================================================
// Authentication Hook (src/hooks/use-auth.tsx)
// This hook provides the user's authentication state to all components.
// It's the source of truth for whether a user is logged in.
// =================================================================================
'use client';

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { User, onAuthStateChanged, signOut } from 'firebase/auth';
import { auth, db } from '@/lib/firebase';
import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore';
import { useRouter } from 'next/navigation';
import { toast } from './use-toast';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Helper function to create user document and initial journal state if they don't exist
const ensureUserDocument = async (user: User) => {
    if (!user) return;
    
    const userDocRef = doc(db, 'users', user.uid);
    const userDoc = await getDoc(userDocRef);
    
    if (!userDoc.exists()) {
        await setDoc(userDocRef, {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName || user.email?.split('@')[0],
            photoURL: user.photoURL,
            createdAt: serverTimestamp(),
            treeName: "My Tree", // Initialize tree name here
        });

        toast({
            title: "Account Created!",
            description: `Welcome to MindBloom, ${user.displayName || 'Friend'}. Your tree has been planted!`,
        });
    }
};

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setLoading(true);
      if (currentUser) {
        await ensureUserDocument(currentUser);
        setUser(currentUser);
      } else {
        setUser(null);
      }
      setLoading(false);
    });
    return () => unsubscribe();
  }, []);

  const logout = async () => {
    await signOut(auth);
    setUser(null);
    router.push('/'); 
  };

  const value = { user, loading, logout };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

// =================================================================================
// Journal Service (src/services/journal-service.ts)
// These are the server actions that interact with Firestore for the journal feature.
// They get the user object from the client to perform authenticated actions.
// =================================================================================
'use server';

import { auth, db } from '@/lib/firebase';
import { 
  collection, addDoc, doc, updateDoc, serverTimestamp, getDoc, setDoc 
} from 'firebase/firestore';
import type { User } from 'firebase/auth';

export const addNote = async (
  payload: { text: string; type: 'good' | 'bad' },
  user: User
) => {
  if (!user) throw new Error('You must be logged in.');

  await addDoc(collection(db, "users", user.uid, "notes"), {
    text: payload.text,
    type: payload.type,
    createdAt: serverTimestamp(),
  });
};

export const renameTree = async (newName: string, user: User) => {
  if (!user) throw new Error('You must be logged in.');

  const userRef = doc(db, "users", user.uid);
  await updateDoc(userRef, { treeName: newName });
};

export const startNewChat = async (user: User) => {
  if (!user) throw new Error('You must be logged in.');
    
  const chatsRef = collection(db, "users", user.uid, "chats");
  const newChatRef = await addDoc(chatsRef, {
    title: `New Chat`,
    createdAt: serverTimestamp(),
  });

  await updateDoc(newChatRef, { title: `Chat #${newChatRef.id.substring(0,4)}...`});
    
  return newChatRef.id;
};


// =================================================================================
// Journal Page (src/app/journal/page.tsx)
// This is the main page component. It uses the useAuth hook to protect the route
// and passes the authenticated user down to the client component.
// =================================================================================
'use client';

import { useAuth } from '@/hooks/use-auth';
import { useRouter } from 'next/navigation';
import { Loader2 } from 'lucide-react';
import { FadeIn } from '@/components/ui/fade-in';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import TreeSection from '@/components/journal/TreeSection';
import type { User } from 'firebase/auth';


function JournalClientPage({ user }: { user: User }) {
    return (
        <FadeIn>
            <div className="container mx-auto py-8">
               <TreeSection user={user} />
            </div>
        </FadeIn>
    )
}


export default function JournalPage() {
    const { user, loading } = useAuth();
    const router = useRouter();

    if (loading) {
        return (
            <div className="container mx-auto py-12 px-4 md:px-6 flex flex-col items-center justify-center text-center min-h-screen">
                <Loader2 className="w-12 h-12 animate-spin mb-4 text-primary"/>
                <h1 className="text-2xl font-bold">Loading Your Journal...</h1>
                <p className="text-muted-foreground">Please wait a moment.</p>
            </div>
        )
    }

    if (!user) {
        return (
            <FadeIn>
                <div className="container mx-auto py-12 px-4 md:px-6 text-center min-h-screen flex items-center justify-center">
                    <Card className="max-w-lg mx-auto">
                        <CardHeader>
                            <CardTitle>Access Denied</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <p>You need to be logged in to view your Tree Journal.</p>
                            <Button asChild>
                                <Link href="/login?redirect=/journal">Login to View Journal</Link>
                            </Button>
                        </CardContent>
                    </Card>
                </div>
            </FadeIn>
        )
    }

    return <JournalClientPage user={user} />;
}


// =================================================================================
// Main Tree Component (src/components/journal/TreeSection.tsx)
// This is the core UI component that brings everything together. It takes the
// user as a prop and handles all data fetching and user interactions.
// =================================================================================
'use client';

import React, { useState, useEffect, useMemo, useRef } from 'react';
import type { User } from 'firebase/auth';
import { motion } from 'framer-motion';
import { useFirestoreCollection, useFirestoreDocument } from '@/hooks/use-firestore';
import { addNote, renameTree, startNewChat } from '@/services/journal-service';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';
import { Sparkles, Plus, Download, Bot, History, Loader2 } from 'lucide-react';
import jsPDF from 'jspdf';
import { format } from 'date-fns';
import { TreeAiChatDialog } from './TreeAiChatDialog';
import { ChatHistoryDialog } from './ChatHistoryDialog';

// (Note: Interface definitions and sub-components like TreeVisualizer, MemoriesDialog, etc., are omitted for brevity but are part of this file)

export default function TreeSection({ user }: { user: User }) {
  const { data: notesData, loading: notesLoading } = useFirestoreCollection<Note>(`users/${user.uid}/notes`);
  const { data: treeState, loading: treeStateLoading } = useFirestoreDocument<TreeState>(`users/${user.uid}`);
  const [goodNote, setGoodNote] = useState('');
  const [isSavingGood, setIsSavingGood] = useState(false);
  const [badNote, setBadNote] = useState('');
  const [isSavingBad, setIsSavingBad] = useState(false);
  // ... other states

  const notes = notesData || [];
  const treeName = treeState?.treeName || 'My Tree';

  if (notesLoading || treeStateLoading) return <div className="flex justify-center items-center h-96"><Loader2 className="w-12 h-12 animate-spin text-primary" /></div>;

  const handleAddGoodNote = async () => {
    if (!goodNote.trim()) return;
    setIsSavingGood(true);
    try { 
      await addNote({ text: goodNote, type: 'good' }, user); // Pass user object
      setGoodNote(''); 
      // toast...
    } catch (e: any) { 
      // toast...
    } finally { 
      setIsSavingGood(false); 
    }
  };

  // ... other handlers like handleAddBadNote, handleSaveTreeName, etc.

  return (
    // JSX for the three-column layout with inputs, tree visual, and interaction buttons.
    // Omitted for brevity.
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6">
        {/* Left Column (Bad Notes, Graph) */}
        <div className="space-y-4">
            <Button onClick={handleAddGoodNote} disabled={isSavingGood || !goodNote}>
                {isSavingGood ? <Loader2 className="animate-spin" /> : 'Add'}
            </Button>
        </div>
        {/* Center Column (Tree) */}
        {/* Right Column (Good Notes, Mood, Interact) */}
    </div>
  );
}
